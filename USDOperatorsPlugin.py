# USDOperatorsPlugin
# Initial code generated by Softimage SDK Wizard
# Executed Mon May 18 18:45:40 UTC+0500 2020 by Shekn
#
# Tip: To add a command to this plug-in, right-click in the
# script editor and choose Tools > Add Command.
import win32com.client
from win32com.client.dynamic import Dispatch 
from win32com.client import constants
import sys
if __sipath__ not in sys.path:
    sys.path.append(__sipath__)
import utils
import prim_mesh
import prim_pointcloud
import imp


app = Application
xsi_factory = XSIFactory


def XSILoadPlugin(in_reg):
    in_reg.Author = "Shekn"
    in_reg.Name = "USDOperatorsPlugin"
    in_reg.Major = 1
    in_reg.Minor = 0

    # RegistrationInsertionPoint - do not remove this line
    in_reg.RegisterOperator("USDMeshOperator")
    in_reg.RegisterOperator("USDPointsOperator")

    return True


def XSIUnloadPlugin(in_reg):
    strPluginName = in_reg.Name
    app.LogMessage(str(strPluginName) + str(" has been unloaded."), constants.siVerbose)
    return True


def USDMeshOperator_Define(in_ctxt):
    operator = in_ctxt.Source
    operator.AddParameter(xsi_factory.CreateParamDef("file_path", constants.siString, constants.siClassifUnknown, constants.siReadOnly, "file_path", "", ""))
    operator.AddParameter(xsi_factory.CreateParamDef("mesh_path", constants.siString, constants.siClassifUnknown, constants.siReadOnly, "mesh_path", "", ""))
    operator.AddParameter(xsi_factory.CreateParamDef2("active", constants.siBool, True))
    operator.AddParameter(xsi_factory.CreateParamDef("frame_offset", constants.siInt4, constants.siClassifUnknown, constants.siPersistable + constants.siAnimatable, "frame_offset", "", 0, -2147483648, 2147483647, 0, 16))
    operator.AddParameter(xsi_factory.CreateParamDef2("is_uvs", constants.siBool, True))
    operator.AddParameter(xsi_factory.CreateParamDef2("is_normals", constants.siBool, True))
    operator.AddParameter(xsi_factory.CreateParamDef2("is_color", constants.siBool, True))
    operator.AddParameter(xsi_factory.CreateParamDef2("is_weightmap", constants.siBool, True))
    operator.AddParameter(xsi_factory.CreateParamDef2("is_cluster", constants.siBool, True))
    operator.AddParameter(xsi_factory.CreateParamDef2("is_vertex_creases", constants.siBool, True))
    operator.AddParameter(xsi_factory.CreateParamDef2("is_edges_creases", constants.siBool, True))
    operator.AddParameter(xsi_factory.CreateParamDef2("is_topology_change", constants.siBool, False))
    return True


def USDPointsOperator_Define(in_ctxt):
    operator = in_ctxt.Source
    operator.AddParameter(xsi_factory.CreateParamDef("file_path", constants.siString, constants.siClassifUnknown, constants.siReadOnly, "file_path", "", ""))
    operator.AddParameter(xsi_factory.CreateParamDef("points_path", constants.siString, constants.siClassifUnknown, constants.siReadOnly, "points_path", "", ""))
    operator.AddParameter(xsi_factory.CreateParamDef2("active", constants.siBool, True))
    operator.AddParameter(xsi_factory.CreateParamDef("frame_offset", constants.siInt4, constants.siClassifUnknown, constants.siPersistable + constants.siAnimatable, "frame_offset", "", 0, -2147483648, 2147483647, 0, 16))
    return True


def USDMeshOperator_DefineLayout(in_ctxt):
    layout = in_ctxt.Source
    USDMeshOperator_BuildUI(layout)
    return True


def USDPointsOperator_DefineLayout(in_ctxt):
    layout = in_ctxt.Source
    USDPointsOperator_BuildUI(layout)
    return True


def USDMeshOperator_Init(in_ctxt):
    o_dict = Dispatch("Scripting.Dictionary")
    o_dict["is_init"] = False
    in_ctxt.UserData = o_dict
    return True


def USDPointsOperator_Init(in_ctxt):
    o_dict = Dispatch("Scripting.Dictionary")
    o_dict["is_init"] = False
    in_ctxt.UserData = o_dict
    return True


def USDMeshOperator_Term(in_ctxt):
    return True


def USDPointsOperator_Term(in_ctxt):
    return True


def USDMeshOperator_Update(in_ctxt):
    imp.reload(utils)
    imp.reload(prim_mesh)
    file_path = in_ctxt.GetParameterValue("file_path")
    mesh_path = in_ctxt.GetParameterValue("mesh_path")
    is_active = in_ctxt.GetParameterValue("active")
    frame_offset = in_ctxt.GetParameterValue("frame_offset")

    is_uvs = in_ctxt.GetParameterValue("is_uvs")
    is_normals = in_ctxt.GetParameterValue("is_normals")
    is_color = in_ctxt.GetParameterValue("is_color")
    is_weightmap = in_ctxt.GetParameterValue("is_weightmap")
    is_cluster = in_ctxt.GetParameterValue("is_cluster")
    is_vertex_creases = in_ctxt.GetParameterValue("is_vertex_creases")
    is_edges_creases = in_ctxt.GetParameterValue("is_edges_creases")

    is_topology_change = in_ctxt.GetParameterValue("is_topology_change")

    # ('uvmap', 'normal', 'color', 'weightmap', 'cluster', 'vertex_creases', 'edge_creases')
    attributes_list = []
    if is_uvs:
        attributes_list.append("uvmap")
    if is_normals:
        attributes_list.append("normal")
    if is_color:
        attributes_list.append("color")
    if is_weightmap:
        attributes_list.append("weightmap")
    if is_cluster:
        attributes_list.append("cluster")
    if is_vertex_creases:
        attributes_list.append("vertex_creases")
    if is_edges_creases:
        attributes_list.append("edge_creases")
    mesh_options = {"attributes": attributes_list}
    mesh_options["is_topology_change"] = is_topology_change

    if is_active:
        xsi_geometry = in_ctxt.OutputTarget.Geometry
        frame = utils.get_current_frame(app) + frame_offset
        data_dict = in_ctxt.UserData
        if data_dict["is_init"] is False:
            prim_mesh.read_mesh_data(mesh_options, data_dict, file_path=file_path, mesh_path=mesh_path)
            data_dict["is_init"] = True

        prim_mesh.set_geometry_from_data(app, xsi_geometry, mesh_options, data_dict, frame)

    return True


def USDPointsOperator_Update(in_ctxt):
    imp.reload(utils)
    imp.reload(prim_pointcloud)
    file_path = in_ctxt.GetParameterValue("file_path")
    points_path = in_ctxt.GetParameterValue("points_path")
    is_active = in_ctxt.GetParameterValue("active")
    frame_offset = in_ctxt.GetParameterValue("frame_offset")

    if is_active:
        xsi_geometry = in_ctxt.OutputTarget.Geometry
        frame = utils.get_current_frame(app) + frame_offset
        data_dict = in_ctxt.UserData
        if data_dict["is_init"] is False:
            prim_pointcloud.read_points_data(data_dict, file_path=file_path, points_path=points_path)
            data_dict["is_init"] = True

        prim_pointcloud.set_pointcloud_from_data(app, xsi_geometry, data_dict, XSIMath, frame)

    return True


def USDMeshOperator_OnInit():
    USDMeshOperator_BuildUI()
    return True


def USDPointsOperator_OnInit():
    USDPointsOperator_BuildUI()
    return True


def USDMeshOperator_BuildUI(layout=None):
    if layout is None:
        layout = PPG.PPGLayout
    layout.Clear()
    layout.AddGroup("Assets Path")
    layout.AddItem("file_path", "File Path")
    layout.AddItem("mesh_path", "Mesh Path")
    layout.EndGroup()

    layout.AddGroup("Options")
    layout.AddItem("active", "Active")
    layout.AddItem("frame_offset", "Frame Offset")
    layout.EndGroup()

    layout.AddGroup("Attributes")
    layout.AddItem("is_uvs", "UV")
    layout.AddItem("is_normals", "Normals")
    layout.AddItem("is_color", "Vertex Colors")
    layout.AddItem("is_weightmap", "Weightmaps")
    layout.AddItem("is_cluster", "Clusters")
    layout.AddItem("is_vertex_creases", "Vertex Creases")
    layout.AddItem("is_edges_creases", "Edge Creases")
    layout.EndGroup()


def USDPointsOperator_BuildUI(layout=None):
    if layout is None:
        layout = PPG.PPGLayout
    layout.Clear()
    layout.AddGroup("Assets Path")
    layout.AddItem("file_path", "File Path")
    layout.AddItem("points_path", "Points Path")
    layout.EndGroup()

    layout.AddGroup("Options")
    layout.AddItem("active", "Active")
    layout.AddItem("frame_offset", "Frame Offset")
    layout.EndGroup()
